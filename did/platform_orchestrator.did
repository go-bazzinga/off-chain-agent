type CanisterUpgradeStatus = record {
  failures : vec record { principal; text };
  count : nat64;
  upgrade_arg : UpgradeCanisterArg;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  status_code : nat16;
};
type PlatformOrchestratorInitArgs = record { version : text };
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : principal; Err : text };
type UpgradeCanisterArg = record {
  version : text;
  canister : WasmType;
  wasm_blob : vec nat8;
};
type WasmType = variant {
  IndividualUserWasm;
  PostCacheWasm;
  SubnetOrchestratorWasm;
};
service : (PlatformOrchestratorInitArgs) -> {
  deposit_cycles_to_canister : (principal, nat) -> (Result);
  get_all_available_subnet_orchestrators : () -> (vec principal) query;
  get_all_subnet_orchestrators : () -> (vec principal) query;
  get_subnet_last_upgrade_status : () -> (CanisterUpgradeStatus) query;
  get_version : () -> (text) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  provision_subnet_orchestrator_canister : (principal) -> (Result_1);
  start_reclaiming_cycles_from_individual_canisters : () -> (Result);
  start_reclaiming_cycles_from_subnet_orchestrator_canister : () -> (text);
  stop_upgrades_for_individual_user_canisters : () -> (Result);
  subnet_orchestrator_maxed_out : () -> ();
  update_profile_owner_for_individual_canisters : () -> ();
  upgrade_canister : (UpgradeCanisterArg) -> (Result);
  upgrade_specific_individual_canister : (principal) -> ();
  upload_wasms : (WasmType, vec nat8) -> (Result);
}
